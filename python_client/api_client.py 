# api_client.py - Python client for communicating with Node.js backend
import requests
import json
import pandas as pd
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EarthquakeAPIClient:
    """
    Client for communicating with the Node.js earthquake processing backend
    """
    
    def __init__(self, base_url: str = "http://localhost:3001"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """Make HTTP request with error handling"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            response = self.session.request(method, url, timeout=30, **kwargs)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.ConnectionError:
            raise ConnectionError(f"Cannot connect to server at {self.base_url}")
        except requests.exceptions.Timeout:
            raise TimeoutError("Request timed out")
        except requests.exceptions.HTTPError as e:
            error_msg = f"HTTP {response.status_code}: {response.text}"
            logger.error(error_msg)
            raise Exception(error_msg)
        except json.JSONDecodeError:
            raise Exception("Invalid JSON response from server")
    
    # ==================== EARTHQUAKE DATA METHODS ====================
    
    def get_earthquakes(self, filters: Optional[Dict] = None) -> List[Dict]:
        params = filters or {}
        response = self._make_request('GET', '/api/earthquakes', params=params)
        
        if response.get('success'):
            return response.get('earthquakes', [])
        else:
            raise Exception(f"Failed to fetch earthquakes: {response.get('error')}")
    
    def get_earthquake_details(self, event_id: str) -> Dict:
        response = self._make_request('GET', f'/api/earthquakes/{event_id}')
        
        if response.get('success'):
            return response.get('earthquake', {})
        else:
            raise Exception(f"Failed to fetch earthquake details: {response.get('error')}")
    
    def search_earthquakes(self, search_params: Dict) -> List[Dict]:
        response = self._make_request('POST', '/api/search/earthquakes', json=search_params)
        
        if response.get('success'):
            return response.get('earthquakes', [])
        else:
            raise Exception(f"Search failed: {response.get('error')}")
    
    # ==================== STATION DATA METHODS ====================
    
    def get_station_data(self, station_id: str, record_id: str, processed: bool = True) -> Dict:
        params = {'processed': 'true' if processed else 'false'}
        response = self._make_request(
            'GET', 
            f'/api/stations/{station_id}/records/{record_id}/data',
            params=params
        )
        
        if response.get('success'):
            return response
        else:
            raise Exception(f"Failed to fetch station data: {response.get('error')}")
    
    def get_station_data_as_dataframe(self, station_id: str, record_id: str, 
                                      direction: str = 'ns', processed: bool = True) -> pd.DataFrame:
        data = self.get_station_data(station_id, record_id, processed)
        
        if processed and 'processed_data' in data:
            direction_key = f"{direction}_acceleration"
            if direction_key in data['processed_data']:
                acc_data = data['processed_data'][direction_key]['processedAcceleration']
                time_data = data['processed_data'][direction_key]['time']
                velocity_data = data['processed_data'][direction_key]['velocity']
                displacement_data = data['processed_data'][direction_key]['displacement']
                
                return pd.DataFrame({
                    'time': time_data,
                    'acceleration': acc_data,
                    'velocity': velocity_data,
                    'displacement': displacement_data
                })
        
        direction_key = f"{direction}_acceleration"
        raw_data = data['raw_data']
        
        return pd.DataFrame({
            'time': raw_data['time'],
            'acceleration': raw_data[direction_key]
        })
    
    # ==================== PROCESSING METHODS ====================
    
    def process_record(self, record_id: str, options: Optional[Dict] = None) -> Dict:
        payload = options or {}
        response = self._make_request('POST', f'/api/process/{record_id}', json=payload)
        
        if response.get('success'):
            return response.get('result', {})
        else:
            raise Exception(f"Processing failed: {response.get('error')}")
    
    def batch_process(self, event_ids: Optional[List[str]] = None, 
                     processing_options: Optional[Dict] = None) -> Dict:
        payload = {
            'event_ids': event_ids,
            'processing_options': processing_options or {}
        }
        
        response = self._make_request('POST', '/api/batch/process', json=payload)
        
        if response.get('success'):
            return response.get('results', {})
        else:
            raise Exception(f"Batch processing failed: {response.get('error')}")
    
    # ==================== FILE UPLOAD METHODS ====================
    
    def upload_afad_file(self, file_path: str) -> Dict:
        try:
            with open(file_path, 'rb') as f:
                files = {'afadFile': (file_path, f, 'text/plain')}
                response = requests.post(
                    f"{self.base_url}/api/upload/afad",
                    files=files,
                    timeout=60
                )
                response.raise_for_status()
                result = response.json()
                
                if result.get('success'):
                    return result.get('result', {})
                else:
                    raise Exception(f"Upload failed: {result.get('error')}")
                    
        except FileNotFoundError:
            raise Exception(f"File not found: {file_path}")
        except Exception as e:
            raise Exception(f"Upload error: {str(e)}")
    
    # ==================== STATISTICS AND EXPORT METHODS ====================
    
    def get_statistics(self) -> Dict:
        response = self._make_request('GET', '/api/statistics')
        
        if response.get('success'):
            return response.get('statistics', {})
        else:
            raise Exception(f"Failed to fetch statistics: {response.get('error')}")
    
    def export_record(self, record_id: str, format: str = 'json') -> str:
        params = {'format': format}
        
        try:
            response = self.session.get(
                f"{self.base_url}/api/export/{record_id}",
                params=params,
                timeout=30
            )
            response.raise_for_status()
            return response.text
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Export failed: {str(e)}")
    
    # ==================== HEALTH CHECK METHOD ====================
    
    def health_check(self) -> bool:
        try:
            response = self._make_request('GET', '/api/statistics')
            return response.get('success', False)
        except:
            return False

# ==================== CONVENIENCE WRAPPER CLASSES ====================

class EarthquakeData:
    """Wrapper class for earthquake data with convenient methods"""
    
    def __init__(self, api_client: EarthquakeAPIClient, event_id: str):
        self.api_client = api_client
        self.event_id = event_id
        self._details = None
    
    @property
    def details(self) -> Dict:
        if self._details is None:
            self._details = self.api_client.get_earthquake_details(self.event_id)
        return self._details
    
    @property
    def records(self) -> List[Dict]:
        return self.details.get('records', [])
    
    @property
    def stations(self) -> List[Dict]:
        return self.details.get('stations', [])
    
    def get_record_data(self, record_id: str, direction: str = 'ns', processed: bool = True) -> pd.DataFrame:
        record = next((r for r in self.records if r['record_id'] == record_id), None)
        if not record:
            raise Exception(f"Record {record_id} not found")
        
        return self.api_client.get_station_data_as_dataframe(
            record['station_id'], record_id, direction, processed
        )
    
    def process_all_records(self, options: Optional[Dict] = None) -> List[Dict]:
        unprocessed = [r for r in self.records if not r.get('has_matlab_analysis', False)]
        results = []
        
        for record in unprocessed:
            try:
                result = self.api_client.process_record(record['record_id'], options)
                results.append({'record_id': record['record_id'], 'success': True, 'result': result})
            except Exception as e:
                results.append({'record_id': record['record_id'], 'success': False, 'error': str(e)})
        
        return results

# ==================== EXAMPLE USAGE ====================

if __name__ == "__main__":
    client = EarthquakeAPIClient()
    
    try:
        if not client.health_check():
            print("‚ùå Server is not responding")
            exit(1)
        print("‚úÖ Server is healthy")
        
        stats = client.get_statistics()
        print(f"üìä Database Statistics:")
        print(f"   Total Earthquakes: {stats.get('total_earthquakes', 'N/A')}")
        print(f"   Total Records: {stats.get('total_records', 'N/A')}")
        print(f"   Processed Records: {stats.get('processed_records', 'N/A')}")
        print(f"   Processing Percentage: {stats.get('processing_percentage', 'N/A')}%")
        
        earthquakes = client.get_earthquakes({'magnitude_min': 4.0})
        print(f"\nüåç Found {len(earthquakes)} earthquakes with magnitude >= 4.0")
        
        if earthquakes:
            eq = EarthquakeData(client, earthquakes[0]['event_id'])
            print(f"\nüîç Earthquake Details: {eq.event_id}")
            print(f"   Magnitude: {eq.details.get('magnitude', 'N/A')}")
            print(f"   Location: {eq.details.get('location', 'N/A')}")
            
            results = eq.process_all_records()
            for r in results:
                if r['success']:
                    print(f"‚úÖ Processed record {r['record_id']}")
                else:
                    print(f"‚ùå Failed record {r['record_id']}: {r['error']}")
        else:
            print("No earthquakes found.")
            
    except Exception as e:
        print(f"Error: {e}")
